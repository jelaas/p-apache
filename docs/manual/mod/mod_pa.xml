<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision$ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_pa.xml.meta">
<name>mod_pa</name>
<description>Provides for per request programmable configuration by external program
</description>
<status>Base</status>
<sourcefile>mod_pa.c</sourcefile>
<identifier>pa_module</identifier>

<summary>
<p>The module hooks early in the apache request processing.
If the module is configured in the Apache configuration the configured program will be run.
The program receives request information in environment variables.</p>

<p>The program then makes decisions about the request and writes what it wants to be done to stdout.</p>

<p>The module will read these commands from the program and modify the request accordingly.</p>

<p>Example of how a configuration might look like.</p>
<code>
if(host("www.some.where")) {
                proxy_host("www.some.where");
                proxy_to("http://some.where.else/path/", DOCUMENT_URI);
                done();
        }
}
</code>
</summary>

<directivesynopsis>
<name>PAConfig</name>
<description>Configure program to be invoked for each request. Env contains request informaton.</description>
<syntax>PAConfig
    <var>prg</var></syntax>
<default>PAConfig SYSCONFDIR/paconfig.conf</default>
<contextlist><context>server config</context><context>virtual host</context>
</contextlist>

<usage>
    <p>The <directive>PAConfig</directive> directive sets the
    program to be invoked for each request.</p>

    <example><title>Example</title>
    <highlight language="config">
      PAConfig /etc/httpd/conf/paconfig.conf
      </highlight>
    </example>

httpd.conf
----------

PAConfig <prg> invoked for each request. Env contains request informaton.
PAError <prg> invoked if error. Env contains information about failed request.
PALogLevel (DEBUG|INFO|WARN|ERR)


Output from your ReqFilter program:
-----------------------------------

DOCUMENT_URI=URI               -- if URI begins with '/' rewrite local path. If not treat as proxy request to URI
Proxy-reverse-alias=real,fake  -- URI translation of headers when proxying
Substitute=real,fake           -- replace occurances of <real> with <fake> within the output document
Proxy-host=HOSTNAME            -- hostname for proxyrequest
IN::Host=VHOST  -- set incoming host header and switch vhost
DocumentRoot=PATH -- set document root for request
Filter=NNN        -- add output filter named 'NNN' to request
Status=NNN        -- return HTTP status NNN to client
Redirect=LOC      -- redirect to URI 'LOC'
Filename=FN       -- serve file 'FN'
Handler=HHH  -- set handler to HHH
CGI=FN            -- execute 'FN' as CGI
Export=NAME=VAL   -- export variable to CGI
QUERY_STRING=S    -- set HTTP query string to 'S'
PATH_INFO=PATH    -- set PATH_INFO for CGI.
IN::NNN=VVV       -- set incoming request header 'NNN' to 'VVV'
OUT::NNN=VVV      -- set outgoing header 'NNN' to 'VVV'
ERR::NNN=VVV      -- set outgoing error header 'NNN' to 'VVV' (If status is set to error).
Log=MSG           -- Log message MSG to apache log

Environment variables set for invoked ReqFilter program
-------------------------------------------------------
HTTPS            -- Set to "on" if HTTPS is active.
IN::<header>     -- One variable for each input header in request.
DOCUMENT_URI     -- Document path requested
QUERY_STRING     -- What comes after requestpath (after '?').
method           -- GET, POST etc.
protocol         -- 0.9, 1.0, 1.1
servername       -- Name of the server according to apache
useragent_ip        -- Client IP address
useragent_addr        -- Client IP address
local_ip         -- Server IP address
PAERROR          -- Set to "1". Only for ReqFilterError.
status           -- Status of the response. Only for ReqFilterError.
FILENAME         -- Absolute path to file. Only for ReqFilterError.
PROXY_HOST       -- Hostname for proxyrequest. Only for ReqFilterError.



</usage>
</directivesynopsis>

</modulesynopsis>
